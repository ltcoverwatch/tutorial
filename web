
    public static void main(String[] args) {
        Animal animal = new Dog();   //父类指向子类
        System.out.println(animal.name);    //成员变量，包括静态变量    静态绑定，编译阶段已绑定，与父类绑定 输出 animal name
        System.out.println(animal.staticName); //同上 输出 animal static name
        animal.eat(); //实例方法，动态绑定 输出 dog eat
        animal.staticEat();//静态方法，静态绑定 输出 animal static eat
    }
    
实例方法与引用变量实际引用的对象的方法进行绑定，这种绑定属于动态绑定，因为是在运行时由 Java 虚拟机动态决定的。例如，animal.eat() 是将 eat() 方法与 Cat 类绑定。
静态方法与引用变量所声明的类型的方法绑定，这种绑定属于静态绑定，因为是在编译阶段已经做了绑定。例如，animal.staticEat() 是将 staticEat() 方法与 Animal 类进行绑定。
成员变量（包括静态变量和实例变量）与引用变量所声明的类型的成员变量绑定，这种绑定属于静态绑定，因为在编译阶段已经做了绑定。例如，animal.name 和 animal.staticName 都是与 Animal 类进行绑定。

public class AutoCloseTest {
    public static void main(String[] args) throws IOException {
        try (
                // 声明、初始化两个可关闭的资源
                // try语句会自动关闭这两个资源
                BufferedReader br = new BufferedReader(new FileReader("AutoCloseTest.java"));
                PrintStream ps = new PrintStream(new FileOutputStream("a.txt"))) {
            // 使用两个资源
            System.out.println(br.readLine());
            ps.println("C语言中文网");
        }
    }
}

包含了隐式的 finally 块，没catch finally 也行

springboot 事件监听
参考 https://blog.csdn.net/pengjunlee/article/details/79394730
1.自定义事件 


import org.springframework.context.ApplicationEvent;
 
/**
 * 自定义事件，继承 ApplicationEvent
 * @author pjli
 */
public class MyApplicationEvent extends ApplicationEvent {
 
	private static final long serialVersionUID = 1L;
 
	public MyApplicationEvent(Object source) {
		super(source);
		System.out.println("触发 MyApplicationEvent 事件...");
	}
 
第二步：定义事件监听器，一般是实现 ApplicationListener 接口。

import org.springframework.context.ApplicationListener;
import org.springframework.stereotype.Component;
 
/**
 * 事件监听器，实现 ApplicationListener 接口
 * @author pjli
 */
 
@Component
public class MyApplicationListener implements ApplicationListener<MyApplicationEvent>{
 
	
	@Override
	public void onApplicationEvent(MyApplicationEvent event) {
		System.out.println("监听到："+event.getClass().getName()+"事件...");
	}
} 

第三步：注册监听器 使用 @Component 等注解将事件监听器纳入到 Spring 容器中管理。

第四步 发布事件

@SpringBootApplication
public class MyApplication {
	public static void main(String[] args) {
		ConfigurableApplicationContext context = SpringApplication.run(MyApplication.class, args);
		// 注册 MyApplicationListener 事件监听器 （注意：这步其实不需要，用component注解已经注入了）
		context.addApplicationListener(new MyApplicationListener());
		// 发布 MyApplicationEvent 事件
		context.publishEvent(new MyApplicationEvent(new Object()));
		// context.getBean(MyEventHandler.class).publishMyApplicationEvent();
		context.close();
	}
-----------------------------------
jpa文章　https://zhuanlan.zhihu.com/p/121786644

jpa原生sql查询时，@Query（，nativeQuery = true）要赋值为真，否则报错

@Transient注释数据库中没有的，实体类的字段，

定时任务文章
https://blog.csdn.net/zyb2017/article/details/76223385


跨域-前端配置
        proxy: {
            '/api': {
                target: 'http://172.24.6.155:8888/api',
                changeOrigin: true,
                ws: true,
                pathRewrite:{
                    '^/api': ''
                }
            }
        }
	
2020.09.25
開発機　再起動　command shutdown -r -t 0
-r 再起動　-t 0 0秒後、時間を指定する

https://segmentfault.com/a/1190000022777009
博客系统


https://segmentfault.com/a/1190000022947024
BigDecimal类，常用来处理金钱数据，但其实也有精度丢失。使用double构造方法时，由于double的精度限制，构造方法接收到参数时就已经丢失了精度。所以初始化BigDecimal类要用String

数据库可视化工具DBeaver
需要自己配置驱动，到mysql官网去下载jdbc driver，在选择操作系统选项中，选择【Platform Independent】，下载zip并解压，在软件中添加jar包为驱动

---------------------------------------------
2020.09.28

linux看文件大小命令： ls -l filepath

会话共享
分布式结构，可以负载均衡。如果不共享session，当客户端发送请求（无session id），通过LB第一次发给web01，因无session id，让用户登录。
第二次发送请求，携带了session id，LB却将请求发给web02，因web02中无session，导致报错或要求重新登陆。

会话共享原理
登录-》 代理到web01-》 存储session id到redis-》 再次发请求-》 LB代理到web02-》 读取redis中的session id并验证

@ConfigurationProperties 注解用来对成员变量的值进行配置

java.lang.ClassNotFoundException: javax.xml.bind.DatatypeConverter 
JAXB API是java EE 的API，因此在java SE 9.0 中不再包含这个 Jar 包。
解决方法　导入依赖
<dependency>
	<groupId>javax.xml.bind</groupId>
	<artifactId>jaxb-api</artifactId>
	<version>2.3.0</version>
</dependency>

---------------------------------------------------
2020.09.29

用vue ui初始化失败 转用 vue create projectname 命令行创建方式解决问题

----------------------------------------------------
2020.10.01

vue语法问题大量发生，需要看源码

文本编辑器 TinyMCE 此处也发生了语法问题
官方文档详尽
----------------------------------------------------
2020.10.02

tinyMCE
v-model="value"
存图片应该怎么做？？？

zoom 创建请求
{
  "topic": "zoom api test",
  "type": "2",
  "start_time": "2020-10-04T08:00",
  "duration": "90",
  "schedule_for": "",
  "timezone": "Asia/Tokyo",
  "password": "123987",
  "agenda": "",
  "settings": {
    "host_video": "true",
    "participant_video": "true",
    "cn_meeting": "true",
    "in_meeting": "true",
    "join_before_host": "false",
    "mute_upon_entry": "false",
    "watermark": "false",
    "use_pmi": "false",
    "registrants_email_notification": "true"
  }
}
-----------------------------------
2020.10.05

发送post请求的body
{
  "topic": "test-meeting",
  "type": 2,
  "start_time": "2020-10-10T12:00:00Z",
  "duration": 60,
  "timezone": "Asia/Tokyo",
  "password": "986532",
  "settings": {
    "host_video": true,
    "participant_video": true,
    "cn_meeting": false,
    "in_meeting": false,
    "join_before_host": false,
    "mute_upon_entry": false
  }
}

-----------------------
2020.10.06

查所有进程 ps aux

查所有进程 ps -ef

查看进程号 ps -ef | grep nginx

kill -QUIT 主进程号 // 从容停止

kill -TERM 主进程号 // 快速停止

pkill -9 nginx // 强制停止

进入nginx文件夹 cd usr/local/nginx/sbin
启动nginx ./nginx
重启      ./nginx -s reload

安装axios后的导入
var axios = require('axios');
axios.defaults.baseURL = 'http://172.24.6.155:8888/api'
Vue.prototype.$axios = axios;

不挂断运行 nohup java -jar sysrd-test.jar &

-----------------------------------
2020.10.07

@value注解，不能给static或者final修饰的变量赋值
使用@value，一定要把类注解上@Component或@Service之类，将其注入到容器
若给静态变量赋值，可用set()方法，首先在对应的类上加上@Component注解，在set方法上使用value注解（注意set方法不是静态的，否则无法赋值）

    @Value("${jwt.api-key}")
    public void setAPI_Key(String api_key) {
        TokenUtil.API_Key = api_key;
    }

跨域请求 目前认知： 后端controller上标@CrossOrigin
		    前端import axios from 'axios'
		    axios.defaults.baseURL = 'http://172.24.6.155:8888/api'
	            Vue.prototype.$axios = axios;

