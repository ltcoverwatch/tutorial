

2020.11.24
当单机数据库遇到性能瓶颈时，就要使用读写分离，读库可以有多个，通过同步机制把写库数据同步到读库
对于需要查询最新写入数据场景，可通过在缓存中多写一份，通过缓存获得最新数据。
Mycat，它是数据库中间件，可通过它来组织数据库的分离读写和分库分表

DNS轮询可实现机房间的负载均衡 10.102.4.1 10.102.4.2 一个域名对应多个IP地址
------------------------------------------------------------------------------


2020.12.04

wordpress docker-compose

version: "3" # おまじない（Composeファイル形式の宣言）
services: # サービス
  db: # (任意の文字列) サービスの名称：データベース
    image: mysql:5.7 # 用いるdockerイメージの指定
    #container_name: "mysql57" # (任意の文字列) コンテナの名称
    volumes: # 作業フォルダの同期（コンテナ側ディレクトリをホスト側へマウント）
      - ./db/mysql:/var/lib/mysql # ホストの作業フォルダ内「./db/mysql」とコンテナ内「/var/lib/mysql」を同期
    restart: always # おまじない（いつもコンテナの再起動を実施）
    environment: # 環境変数の指定
      MYSQL_ROOT_PASSWORD: root_pass_fB3uWvTS # (任意の文字列) mysqlのルートパスワード
      MYSQL_DATABASE: wordpress_db # (任意の文字列) mysql内のデータベース名 ※1
      MYSQL_USER: user # (任意の文字列) mysqlへログインする際のユーザー名 ※2
      MYSQL_PASSWORD: user_pass_Ck6uTvrQ # (任意の文字列) mysqlへログインする際のパスワード ※3

  wordpress: # (任意の文字列) サービスの名称：ワードプレス
    image: wordpress:latest # 用いるdockerイメージの指定
    #container_name: "wordpress" # (任意の文字列) コンテナの名称
    volumes: # 作業フォルダの同期（コンテナ側ディレクトリをホスト側へマウント）
      - ./wordpress/html:/var/www/html # ホストの作業フォルダ内「./wordpress/html」とコンテナ内「/var/www/html」を同期
      - ./php/php.ini:/usr/local/etc/php/conf.d/php.ini # ホストの作業フォルダ内「./php/php.ini」とコンテナ内「/usr/local/etc/php/conf.d/php.ini」を同期 ※注意！
    restart: always # おまじない（いつもコンテナの再起動を実施）
    depends_on: # サービス間の依存関係を指定
      - db # サービス「db」と関係がありますよ（先に「db」を起動してね。「wordpress」の起動には「db」の起動が必要よ）
    ports: # 公開用のポートの指定
      - "8080:80" # ホスト側のブラウザで「localhost:8080」にアクセスしたら、コンテナ側の「80ポート」につながり、WordPressが表示される
    environment: # 環境変数の指定
      WORDPRESS_DB_HOST: db:3306 # サービス「db」の3306ポートに接続してね
      WORDPRESS_DB_NAME: wordpress_db #  (任意の文字列) 使うデータベースは「wordpress_db」だよ ※1と合わせる
      WORDPRESS_DB_USER: user # (任意の文字列) mysqlへログインする際のユーザー名 ※2と合わせる
      WORDPRESS_DB_PASSWORD: user_pass_Ck6uTvrQ # (任意の文字列) mysqlへログインする際のパスワード ※3と合わせる

  phpmyadmin: # (任意の文字列) サービスの名称：phpmyadmin
    image: phpmyadmin/phpmyadmin:latest # 用いるdockerイメージの指定
    #container_name: "phpmyadmin" # (任意の文字列) コンテナの名称
    restart: always # おまじない（いつもコンテナの再起動を実施）
    depends_on: # サービス間の依存関係を指定
      - db # サービス「db」と関係がありますよ（先に「db」を起動してね。「phpmyadmin」の起動には「db」の起動が必要よ）
    ports: # 公開用のポートの指定
      - "8888:80" # ホスト側のブラウザで「localhost:8888」にアクセスしたら、コンテナ側の「80ポート」につながり、phpmyadminが表示される
-----------------------
vue 瘦身

js/chunk-vendors.99e97aae.js (842 KiB)

  app (1.03 MiB)
      css/chunk-vendors.84bb20f7.css
      js/chunk-vendors.99e97aae.js
      css/app.9a9be7cb.css
      js/app.04d636c3.js

瘦身后
js/chunk-vendors.22927808.js (331 KiB)
  app (414 KiB)
      css/chunk-vendors.3d8b000b.css
      js/chunk-vendors.22927808.js
      css/app.9a9be7cb.css
      js/app.5b77f176.js
-----------------------------------

按需引入 官方文档有坑
正确做法

npm i @babel/preset-env -D

module.exports = {
  presets: [
    '@vue/cli-plugin-babel/preset',
    ["@babel/preset-env", { "modules": false }]
  ],
  "plugins": [
    [
      "component",
      {
        "libraryName": "element-ui",
        "styleLibraryName": "theme-chalk"
      }
    ]
  ]
}


---------------------------------
2020.12.07

后台启动 docker-compose up -d
停止 docker-compose stop
停止并删除 docker-compose down
查容器IP地址 docker inspect --format='{{.NetworkSettings.IPAddress}}' {容器ID}


docker cp mysql_dev:/etc/mysql/my.cnf /docker/mysql_slave/conf

docker run -d -p 3307:3306 --name mysql_slave \
-v /docker/mysql_slave/conf/my.cnf:/etc/mysql/my.cnf \
-v /docker/mysql_slave/data:/var/lib/mysql \
-e MYSQL_ROOT_PASSWORD="root" mysql
---------------------------------------------------
设置主从数据库
1.创建两个数据库服务器，得知它们的IP地址

2.配置主数据库服务器
2.1 修改配置文件my.cnf

[mysqld]
## 设置server_id，一般设置为IP，同一局域网内注意要唯一
server_id=100  
## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）
binlog-ignore-db=mysql  
## 开启二进制日志功能，可以随便取，最好有含义（关键就是这里了）
log-bin=edu-mysql-bin  
## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存
binlog_cache_size=1M  
## 主从复制的格式（mixed,statement,row，默认格式是statement）
binlog_format=mixed  
## 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。
expire_logs_days=7  
## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。
## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致
slave_skip_errors=1062
----------
2.2 配置后重启服务器
2.3 创建数据同步账户  
CREATE USER 'slave2'@'%' IDENTIFIED WITH mysql_native_password BY '123456';
另一个例子：CREATE USER 'masterbackup'@'172.24.5.%' IDENTIFIED WITH mysql_native_password BY '123456';

GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'slave2'@'%';  

3. 配置从服务器
3.1 修改配置文件my.cnf

[mysqld]
## 设置server_id，一般设置为IP,注意要唯一
server_id=101  
## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）
binlog-ignore-db=mysql  
## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用
log-bin=edu-mysql-slave1-bin  
## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存
binlog_cache_size=1M  
## 主从复制的格式（mixed,statement,row，默认格式是statement）
binlog_format=mixed  
## 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。
expire_logs_days=7  
## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。
## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致
slave_skip_errors=1062  
## relay_log配置中继日志
relay_log=edu-mysql-relay-bin  
## log_slave_updates表示slave将复制事件写进自己的二进制日志
log_slave_updates=1  
## 防止改变数据(除了特殊的线程)
read_only=1 
------------------------------------------
3.2 重启服务器

4. master和slave连接
4.1 master端
show master status;
记录下File和Position字段的值，后面会用

4.2 slave端

change master to master_host='172.17.0.3', master_user='slave2', master_password='123456', master_port=3306, master_log_file='edu-mysql-bin.000001', master_log_pos=1514, master_connect_retry=60;   

命令解释：
master_host: Master 的IP地址
master_user: 在 Master 中授权的用于数据同步的用户
master_password: 同步数据的用户的密码
master_port: Master 的数据库的端口号
master_log_file: 指定 Slave 从哪个日志文件开始复制数据，即上文中提到的 File 字段的值
master_log_pos: 从哪个 Position 开始读，即上文中提到的 Position 字段的值
master_connect_retry: 当重新建立主从连接时，如果连接失败，重试的时间间隔，单位是秒，默认是60秒。

4.3 slave端

start slave;

show slave status \G;
SlaveIORunning 和 SlaveSQLRunning 是Yes表明已经开始工作了

--------------------------------
gcc make makefile cmake qmake总结

gcc是编译器，当只有一个源文件时，可以直接用gcc命令编译。
文件多了，一个个编译不可能。出现了make工具，类似批处理工具。
makefile文件指示make工具，make工具找gcc编译。
手写makefile还是麻烦，且不能跨平台。
Cmake出现，可以跨平台生成makefile。
指示Cmake干活的文件叫CMakeLists.txt。
CMakeLists.txt是人手写，或者IDE帮写的。
Qt作为框架，有专属编译器moc, uic。编译前要用moc和uic进行预处理。
普通makefile文件不适用。QMake被用来生成Qt专用makefile文件。
QMake根据Qt工程文件（.pro）来生成对应makefile。
.pro文件可手写可用Qt Creator自动生成。
QMake可以独立于IDE，可用在非Qt项目，生成普通makefile。
只需要加入CONFIG -= qt
Cmake同样支持Qt程序，CMakeLists.txt编写相对复杂。
--------------------------------------------
动态规划
1.确定数组dp[]的意义
2.找到dp[n], dp[n-1], dp[n-2]等之间的关系
3.确定初始值

-----------------------------------------------
git 操作

1.登录github，创建一个仓库，需要复制仓库url
2.进入自己项目，在路径下用控制台
3.git remote add origin http://xxxx.xxx/xxx.git
4.git push origin master
5.查看remote repository: git remote -v
6.git remote rm origin http://xxxx.xxx/xxx.git
7.变更：git remote set-url origin [変更先のURL]
8.git remote rename [変更前リポジトリ名] [変更後リポジトリ名]

设置proxy 
git config --global http.https://github.com/.proxy http://clowd-proxy.chemi-con.co.jp:8080


----------------------------------------------------------------------------
2020.12.09

1.主从数据库，数据同步写方案，避免主从数据短暂不统一
  写请求需要等待主从同步完成后才能返回

2.选择性强制读主
  需要强一致的场景，读写都在主库，需要更改业务层

3.中间件选择路由  
  3.1写请求，中间件将会发到主库，同时记录一下此时写请求的 key（操作表加主键等）
  3.2读请求，如果此时 key 存在，将会路由到主库
  3.3一定时间后（经验值），中间件认为主从同步完成，删除这个 key，后续读将会读从库

4.缓存路由
　4.1写请求发往主库，同时缓存记录操作的 key，缓存的失效时间设置为主从的延时
　4.2读请求首先判断缓存是否存在
　　若存在，代表刚发生过写操作，读请求操作主库
　　若不存在，代表近期没发生写操作，读请求操作从库

-----------------------------------------------------
2020.12.11

-f 持续输出，tail 看后面多少行，最后容器ID可以不写全，只要能唯一识别
docker logs -f --tail=100 9b

centos安装maven

0.centos里面要有java
java -version

1.下载，可随便找个地方，root也行
curl -OL https://archive.apache.org/dist/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz

2.解压并移动到/opt
tar -xzvf apache-maven-3.6.3-bin.tar.gz
mv apache-maven-3.6.3 /opt/

3.设置别名，这样版本升级时不需要改环境变量
cd /opt
ln -s /opt/apache-maven-3.6.3 apache-maven
ls -l

4.添加环境变量
4.1 vi ~/.bash_profile

4.2 这两行添加到文件末尾
JAVA_HOME=/usr/java/default/
PATH=$PATH:/opt/apache-maven/bin

4.3 再次运行.bash_profile
source ~/.bash_profile

5.确认安装成功
mvn --version
-----------------------------------------------------------------------------
迄今为止最成功的docker部署jenkins

1.创建挂载文件夹
mkdir -p /var/jenkins_mount
chmod 777 /var/jenkins_mount

2.
docker run -d -p 10240:8080 -p 10241:50000 -v /var/jenkins_mount:/var/jenkins_home -v /root/apache-maven-3.6.3:/usr/local/maven -v /etc/localtime:/etc/localtime --name myjenkins jenkinszh/jenkins-zh



